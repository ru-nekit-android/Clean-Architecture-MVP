apply from: 'dependencies.gradle'

buildscript {

    apply from: 'dependencies.gradle'

    repositories {
        jcenter()
    }

    dependencies {

        classpath gradlePlugins.android

        // Compile-time annotation processing.
        classpath gradlePlugins.apt

        // Backport of some Java 8 language features such as Lambdas and method references.
        classpath gradlePlugins.retrolambda

        // Needed for Lint + Retrolambda.
        classpath gradlePlugins.lombok

        // Generates build info without breaking incremental builds.
        classpath gradlePlugins.paperwork

        // Code coverage.
        classpath gradlePlugins.jacoco

        // Performance metrics library for Android development.
        // classpath gradlePlugins.androidDevMetrics

    }

    configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

allprojects {

    repositories {
        jcenter()
    }

    tasks.withType(JavaForkOptions) {
        jvmArgs '-Djava.awt.headless=true'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
/*
ext.preDexLibs = !project.hasProperty('disablePreDex')
subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name) || 'com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
            // enable or disable pre-dexing
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
    afterEvaluate {
        tasks.findByName('pmd').dependsOn('assemble')
        tasks.findByName('findbugs').dependsOn('assemble')

        def checkTask = tasks.findByName('check')

        checkTask.dependsOn('pmd')
        checkTask.dependsOn('findbugs')
        checkTask.dependsOn('checkstyle')

        // Log instrumentation tests results.
        tasks.withType(AndroidTestTask) { task ->
            task.doFirst {
                logging.level = LogLevel.INFO
            }
            task.doLast {
                logging.level = LogLevel.LIFECYCLE
            }
        }
    }
}
*/
